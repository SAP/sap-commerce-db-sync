CREATE OR REPLACE PROCEDURE SCHEMA_PROCEDURE (IN tablename VARCHAR(1000))
  LANGUAGE SQLSCRIPT AS
BEGIN
	DECLARE found INT=0;
SELECT count(*) INTO found FROM OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME=:tablename;
IF tablename = 'MIGRATIONTOOLKIT_SCHEMADIFFS' AND :found > 0
	THEN
DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFS;
END IF;

IF tablename = 'MIGRATIONTOOLKIT_SCHEMADIFFTASKS' AND :found > 0
	THEN
DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFTASKS;
END IF;

IF tablename = 'MIGRATIONTOOLKIT_SCHEMADIFFSTATUS' AND :found > 0
	THEN
DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS;
END IF;
END;
#
CALL SCHEMA_PROCEDURE('MIGRATIONTOOLKIT_SCHEMADIFFS');
#
CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFS (
    pk INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    schemaDifferenceId NVARCHAR(255) NOT NULL,
    referenceDatabase NVARCHAR(255) NOT NULL,
    missingTableLeftName NVARCHAR(255) NOT NULL,
    missingTableRightName NVARCHAR(255) NOT NULL,
    missingColumnName NVARCHAR(255) NULL
);
#
CALL SCHEMA_PROCEDURE('MIGRATIONTOOLKIT_SCHEMADIFFTASKS');
#
CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFTASKS (
    schemaDifferenceId NVARCHAR(255) NOT NULL,
    pipelinename NVARCHAR(255) NOT NULL,
    duration NVARCHAR(255) NULL,
    failure INT NOT NULL DEFAULT '0',
    error NVARCHAR(5000) NULL,
    lastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_UTCTIMESTAMP,
    durationinseconds NUMERIC(10,2) NULL DEFAULT 0,
    PRIMARY KEY (schemaDifferenceId, pipelinename)
);
#
CALL SCHEMA_PROCEDURE('MIGRATIONTOOLKIT_SCHEMADIFFSTATUS');
#
CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS (
    schemaDifferenceId NVARCHAR(255) NOT NULL PRIMARY KEY,
    startAt TIMESTAMP NOT NULL DEFAULT CURRENT_UTCTIMESTAMP,
    endAt TIMESTAMP,
    lastUpdate TIMESTAMP NOT NULL DEFAULT CURRENT_UTCTIMESTAMP,
    total INT NOT NULL DEFAULT 4,
    completed INT NOT NULL DEFAULT 0,
    failed INT NOT NULL DEFAULT 0,
    status NVARCHAR(255) NOT NULL DEFAULT 'RUNNING',
    sqlScript CLOB NULL
);
#
CREATE OR REPLACE TRIGGER MIGRATIONTOOLKIT_SCHEMADIFFSTATUS_Update_trigger
AFTER UPDATE
                 ON MIGRATIONTOOLKIT_SCHEMADIFFTASKS
                 REFERENCING OLD ROW AS old, NEW ROW AS new
                 FOR EACH ROW
BEGIN
    /* ORIGSQL: PRAGMA AUTONOMOUS_TRANSACTION; */
  --  BEGIN AUTONOMOUS TRANSACTION
        DECLARE var_pipeline_count DECIMAL(38,10);  /* ORIGSQL: var_pipeline_count NUMBER ; */

        /* ORIGSQL: CURSOR cur_count_pipeline IS select COUNT(pipelinename) countpipelines from MIGR(...) */
        DECLARE CURSOR cur_count_pipeline
        FOR
SELECT   /* ORIGSQL: SELECT COUNT(pipelinename) countpipelines from MIGRATIONTOOLKIT_SCHEMADIFFTASKS w(...) */
    COUNT(pipelinename) AS countpipelines
FROM
    MIGRATIONTOOLKIT_SCHEMADIFFTASKS
WHERE
        failure = '1'
   OR duration IS NOT NULL;

/* RESOLVE: Trigger declaration: Additional conversion may be required */

/* ORIGSQL: OPEN cur_count_pipeline; */
OPEN cur_count_pipeline;

/* ORIGSQL: FETCH cur_count_pipeline INTO var_pipeline_count; */
FETCH cur_count_pipeline INTO var_pipeline_count;

IF (:var_pipeline_count > 0)
        THEN
            -- completed count
            /* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET COMPLETED = NVL((SELECT count(*) (...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST
SET
    /* ORIGSQL: COMPLETED = */
    COMPLETED = IFNULL(  /* ORIGSQL: NVL((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.migrationi(...) */
            (
                SELECT   /* ORIGSQL: (SELECT COUNT(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.schemaDifferenceId = (...) */
                    COUNT(*)
                FROM
                    MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
                WHERE
                        ST.schemaDifferenceId = TK.schemaDifferenceId
                  AND duration IS NOT NULL
                GROUP BY
                    schemaDifferenceId
            )
        ,0);

-- failed count
/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET failed = NVL((SELECT count(*) FRO(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST
SET
    /* ORIGSQL: failed = */
    failed = IFNULL(  /* ORIGSQL: NVL((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.migrationi(...) */
            (
                SELECT   /* ORIGSQL: (SELECT COUNT(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.schemaDifferenceId = (...) */
                    COUNT(*)
                FROM
                    MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
                WHERE
                        ST.schemaDifferenceId = TK.schemaDifferenceId
                  AND failure = '1'
                GROUP BY
                    schemaDifferenceId
            )
        ,0);
END IF;

        -- this sQL is slightly diff from the SQL server one
        /* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET lastupdate = sys_extract_utc(systime(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: lastupdate = */
    lastupdate = CURRENT_UTCTIMESTAMP   /* ORIGSQL: sys_extract_utc(systimestamp) */
WHERE
        schemaDifferenceId = :new.schemaDifferenceId;

/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET endAt = sys_extract_utc(systimestamp(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: endAt = */
    endAt = CURRENT_UTCTIMESTAMP   /* ORIGSQL: sys_extract_utc(systimestamp) */
WHERE
        total = completed
  AND endAt IS NULL;

/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET status = 'COMPLETED' WHERE status = (...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: status = */
    status = 'COMPLETED'
WHERE
        status = 'RUNNING'
  AND total = completed;

/* ORIGSQL: COMMIT; */
/* RESOLVE: Statement 'COMMIT' not currently supported in HANA SQL trigger objects */
-- COMMIT;; /* NOT CONVERTED! */
-- END;
END;

#

CREATE OR REPLACE TRIGGER MIGRATIONTOOLKIT_SCHEMADIFFSTATUS_Insert_trigger
AFTER INSERT
ON MIGRATIONTOOLKIT_SCHEMADIFFTASKS
REFERENCING OLD ROW AS old, NEW ROW AS new
FOR EACH ROW
BEGIN
    /* ORIGSQL: PRAGMA AUTONOMOUS_TRANSACTION; */
  --  BEGIN AUTONOMOUS TRANSACTION
        DECLARE var_pipeline_count DECIMAL(38,10);  /* ORIGSQL: var_pipeline_count NUMBER ; */

        /* ORIGSQL: CURSOR cur_count_pipeline IS select COUNT(pipelinename) countpipelines from MIGR(...) */
        DECLARE CURSOR cur_count_pipeline
        FOR
SELECT   /* ORIGSQL: SELECT COUNT(pipelinename) countpipelines from MIGRATIONTOOLKIT_SCHEMADIFFTASKS w(...) */
    COUNT(pipelinename) AS countpipelines
FROM
    MIGRATIONTOOLKIT_SCHEMADIFFTASKS
WHERE
        failure = '1'
   OR duration IS NOT NULL;

/* RESOLVE: Trigger declaration: Additional conversion may be required */

/* ORIGSQL: OPEN cur_count_pipeline; */
OPEN cur_count_pipeline;

/* ORIGSQL: FETCH cur_count_pipeline INTO var_pipeline_count; */
FETCH cur_count_pipeline INTO var_pipeline_count;

IF (:var_pipeline_count > 0)
        THEN
            -- completed count
            /* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET COMPLETED = NVL((SELECT count(*) (...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST
SET
    /* ORIGSQL: COMPLETED = */
    COMPLETED = IFNULL(  /* ORIGSQL: NVL((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.migrationi(...) */
            (
                SELECT   /* ORIGSQL: (SELECT COUNT(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.schemaDifferenceId = (...) */
                    COUNT(*)
                FROM
                    MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
                WHERE
                        ST.schemaDifferenceId = TK.schemaDifferenceId
                  AND duration IS NOT NULL
                GROUP BY
                    schemaDifferenceId
            )
        ,0);

-- failed count
/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET failed = NVL((SELECT count(*) FRO(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST
SET
    /* ORIGSQL: failed = */
    failed = IFNULL(  /* ORIGSQL: NVL((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.migrationi(...) */
            (
                SELECT   /* ORIGSQL: (SELECT COUNT(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK WHERE ST.schemaDifferenceId = (...) */
                    COUNT(*)
                FROM
                    MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
                WHERE
                        ST.schemaDifferenceId = TK.schemaDifferenceId
                  AND failure = '1'
                GROUP BY
                    schemaDifferenceId
            )
        ,0);
END IF;

        -- this sQL is slightly diff from the SQL server one
        /* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET lastupdate = sys_extract_utc(systime(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: lastupdate = */
    lastupdate = CURRENT_UTCTIMESTAMP   /* ORIGSQL: sys_extract_utc(systimestamp) */
WHERE
        schemaDifferenceId = :new.schemaDifferenceId;

/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET endAt = sys_extract_utc(systimestamp(...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: endAt = */
    endAt = CURRENT_UTCTIMESTAMP   /* ORIGSQL: sys_extract_utc(systimestamp) */
WHERE
        total = completed
  AND endAt IS NULL;

/* ORIGSQL: UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS SET status = 'COMPLETED' WHERE status = (...) */
UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
SET
    /* ORIGSQL: status = */
    status = 'COMPLETED'
WHERE
        status = 'RUNNING'
  AND total = completed;

/* ORIGSQL: COMMIT; */
/* RESOLVE: Statement 'COMMIT' not currently supported in HANA SQL trigger objects */
-- COMMIT;; /* NOT CONVERTED! */
-- END;
END;

#