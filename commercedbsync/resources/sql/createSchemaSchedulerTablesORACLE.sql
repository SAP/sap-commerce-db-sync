BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFS';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/


CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFS (
    pk NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    schemaDifferenceId NVARCHAR2(255) NOT NULL,
    referenceDatabase NVARCHAR2(255) NOT NULL,
    missingTableLeftName NVARCHAR2(255) NOT NULL,
    missingTableRightName NVARCHAR2(255) NOT NULL,
    missingColumnName NVARCHAR2(255) NULL
)
/



BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFTASKS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/


	
CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFTASKS (
    schemaDifferenceId NVARCHAR2(255) NOT NULL,
    pipelinename NVARCHAR2(255) NOT NULL,
    duration NVARCHAR2(255) NULL,
    failure NUMBER(1) DEFAULT 0 NOT NULL,
    error CLOB NULL,
    lastUpdate TIMESTAMP DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP),
    durationinseconds NUMBER(10,2) DEFAULT 0 NULL,
    PRIMARY KEY (schemaDifferenceId, pipelinename)
)
/



BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/


CREATE TABLE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS (
    schemaDifferenceId NVARCHAR2(255) NOT NULL PRIMARY KEY,
    startAt TIMESTAMP DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP) NOT NULL,
    endAt TIMESTAMP,
    lastUpdate TIMESTAMP DEFAULT SYS_EXTRACT_UTC(SYSTIMESTAMP) NOT NULL,
    total NUMBER(10) DEFAULT 4 NOT NULL ,
    completed NUMBER(10) DEFAULT 0 NOT NULL ,
    failed NUMBER(10) DEFAULT 0 NOT NULL ,
    status NVARCHAR2(255) DEFAULT 'RUNNING' NOT NULL,
    sqlScript CLOB NULL
)
/




CREATE OR REPLACE TRIGGER MIGRATIONTOOLKIT_SCHEMADIFFSTATUS_Update
    AFTER INSERT  OR UPDATE
    ON MIGRATIONTOOLKIT_SCHEMADIFFTASKS
    FOR EACH ROW   
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;

	var_pipeline_count NUMBER ;

	CURSOR cur_count_pipeline
	IS select count(pipelinename) countpipelines from MIGRATIONTOOLKIT_SCHEMADIFFTASKS where failure='1' OR duration is not NULL;
	
BEGIN	 
    
 
    OPEN cur_count_pipeline;
 	FETCH cur_count_pipeline INTO var_pipeline_count;
 	IF (var_pipeline_count > 0 ) THEN
 		-- completed count
	    UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET COMPLETED = 
			NVL
			((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
				WHERE 
					ST.schemaDifferenceId = TK.schemaDifferenceId
					AND duration IS NOT NULL
				GROUP BY schemaDifferenceId
			),0);
	
	    -- failed count
		UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET failed = 
			NVL
			((SELECT count(*) FROM MIGRATIONTOOLKIT_SCHEMADIFFTASKS TK
				WHERE 
					ST.schemaDifferenceId = TK.schemaDifferenceId
					AND failure='1'
				GROUP BY schemaDifferenceId
			),0);
		
    END IF;
    -- this takes care of THIS ROW, for which trigger is fired
	IF UPDATING AND :NEW.failure='1' AND :OLD.failure='0' THEN
    	UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET failed = failed + 1 WHERE schemaDifferenceId = :NEW.schemaDifferenceId;
    	--INSERT INTO EVENT_LOG_CMT (DESCRIPTION, COUNTS) VALUES ('Updating failed', 1);
    END IF;
   
   	-- this takes care of THIS ROW,l for which trigger is fired
    IF UPDATING AND :NEW.duration IS NOT NULL AND :OLD.duration IS NULL THEN
    	UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET completed = completed + 1 WHERE schemaDifferenceId = :NEW.schemaDifferenceId;
    	--INSERT INTO EVENT_LOG_CMT (DESCRIPTION, COUNTS) VALUES ('Updating completed', 1);
    END IF;
   
   	 -- this takes care of THIS ROW,l for which trigger is fired
    IF INSERTING AND :NEW.failure='1' THEN
    	UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET failed = failed + 1 WHERE schemaDifferenceId = :NEW.schemaDifferenceId;
    	--INSERT INTO EVENT_LOG_CMT (DESCRIPTION, COUNTS) VALUES ('INSERTING failed', 1);
    END IF;
   
   	-- this takes care of THIS ROW,l for which trigger is fired
    IF INSERTING AND :NEW.duration IS NOT NULL THEN
    	UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS ST SET completed = completed + 1 WHERE schemaDifferenceId = :NEW.schemaDifferenceId;
    	--INSERT INTO EVENT_LOG_CMT (DESCRIPTION, COUNTS) VALUES ('INSERTING completed', 1);
    END IF;
 	
    -- this sQL is slightly diff from the SQL server one
	UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS 
		SET lastupdate = sys_extract_utc(systimestamp) 
		WHERE schemaDifferenceId = :NEW.schemaDifferenceId;
   
    UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
        SET endAt = sys_extract_utc(systimestamp)
        WHERE total = completed
        AND endAt IS NULL;
    
    UPDATE MIGRATIONTOOLKIT_SCHEMADIFFSTATUS
        SET status = 'COMPLETED'
        WHERE status = 'RUNNING'
          AND total = completed;
    COMMIT;
END;

/

